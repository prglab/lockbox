// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "UserStorage.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/PosixThreadFactory.h>
#include <thrift/server/TNonblockingServer.h>

#include <boost/thread.hpp>
#include <ctime>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using apache::thrift::concurrency::ThreadManager;
using apache::thrift::concurrency::PosixThreadFactory;
using boost::shared_ptr;

class Counter {
 public:
  Counter() : count_(0) {}

  ~Counter() {}

  void inc() {
    boost::upgrade_lock<boost::shared_mutex> lock(mutex_);
    boost::upgrade_to_unique_lock<boost::shared_mutex> unique_lock(lock);
    ++count_;
  }

  int get() {
    boost::shared_lock<boost::shared_mutex> lock(mutex_);
    return count_;
  }

 private:
  int count_;
  boost::shared_mutex mutex_;
};

class UserStorageHandler : virtual public UserStorageIf {
 public:
  // Does not take ownership of |counter|.
  UserStorageHandler(Counter* counter) : counter_(counter) {
    // Your initialization goes here
  }

  void store(const UserProfile& user) {
    // Your implementation goes here
    counter_->inc();
    printf("%ld store %d\n", time(NULL), counter_->get());
  }

  void retrieve(UserProfile& _return, const int32_t uid) {
    // Your implementation goes here
    printf("retrieve\n");
  }

 private:
  Counter* counter_;

};

int main(int argc, char **argv) {
  if (argc != 2) {
    std::cerr << "Please check code for usage." << std::endl;
    return 1;
  }

  Counter counter;
  boost::shared_mutex mutex_;

  int port = atoi(argv[1]);

  shared_ptr<UserStorageHandler> handler(new UserStorageHandler(&counter));
  shared_ptr<TProcessor> processor(new UserStorageProcessor(handler));
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  // using thread pool with maximum 15 threads to handle incoming requests
  shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager(15);
  shared_ptr<PosixThreadFactory> threadFactory = shared_ptr<PosixThreadFactory>(new PosixThreadFactory());
  threadManager->threadFactory(threadFactory);
  threadManager->start();
  TNonblockingServer server(processor, protocolFactory, port, threadManager);
  server.serve();
  return 0;
}
